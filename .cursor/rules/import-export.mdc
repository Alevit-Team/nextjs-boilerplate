---
description: Import/export patterns and path alias guidelines
globs: *.tsx,*.ts
---

# Import/Export Guidelines

## Path Aliases

Use TypeScript path aliases for clean, maintainable imports:

```typescript
// ✅ DO: Use path aliases
import { Button } from "@/components/ui";
import { useAuth } from "@/features/auth/hooks";
import { ProductService } from "@/services/product-service";
import { User } from "@/types";

// ❌ DON'T: Relative imports for distant files
import { Button } from "../../../components/ui/button";
import { useAuth } from "../../../../features/auth/hooks/use-auth";
```

### Alias Configuration

Ensure these aliases are configured in `tsconfig.json`:

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/features/*": ["./src/features/*"],
      "@/lib/*": ["./src/lib/*"],
      "@/services/*": ["./src/services/*"],
      "@/hooks/*": ["./src/hooks/*"],
      "@/store/*": ["./src/store/*"],
      "@/types/*": ["./src/types/*"],
      "@/constants/*": ["./src/constants/*"],
      "@/assets/*": ["./src/assets/*"]
    }
  }
}
```

## Import Order

Follow this strict order for imports:

```typescript
// 1. React imports
import React, { useState, useEffect } from "react";
import type { ReactNode } from "react";

// 2. Next.js imports
import { NextPage } from "next";
import { useRouter } from "next/router";
import Image from "next/image";

// 3. Third-party libraries (alphabetical)
import { clsx } from "clsx";
import { z } from "zod";
import { motion } from "framer-motion";

// 4. UI Components (from most generic to specific)
import { Button, Card, Input } from "@/components/ui";
import { Header, Footer } from "@/components/layout";

// 5. Feature components and hooks
import { ProductCard } from "@/features/product/components";
import { useAuth } from "@/features/auth/hooks";

// 6. Services and utilities
import { productService } from "@/services/product-service";
import { cn } from "@/lib/utils";

// 7. Types and constants
import type { Product, User } from "@/types";
import { API_ENDPOINTS } from "@/constants/api";

// 8. Relative imports (last)
import "./styles.css";
import { LocalComponent } from "./LocalComponent";
```

## Export Patterns

### Named Exports (Preferred)

```typescript
// ✅ DO: Use named exports
export const Button = ({ children, ...props }: ButtonProps) => {
  return <button {...props}>{children}</button>;
};

export const Card = ({ children }: CardProps) => {
  return <div className="card">{children}</div>;
};

// Export types alongside components
export type { ButtonProps, CardProps };
```

### Default Exports (Limited Use)

```typescript
// ✅ DO: Default exports only for pages and single-purpose files
const HomePage: NextPage = () => {
  return <div>Home Page</div>;
};

export default HomePage;

// ✅ DO: Default exports for main feature entry points
export { default } from "./ProductCard";
```

### Barrel Exports

Create `index.ts` files for clean imports:

```typescript
// src/components/ui/index.ts
export { Button } from "./Button";
export { Card } from "./Card";
export { Input } from "./Input";
export { Modal } from "./Modal";

// Export types
export type { ButtonProps } from "./Button";
export type { CardProps } from "./Card";
export type { InputProps } from "./Input";
export type { ModalProps } from "./Modal";
```

```typescript
// src/features/product/index.ts
export * from "./components";
export * from "./hooks";
export * from "./services";
export * from "./types";
```

## Import Grouping Rules

### ✅ DO: Group related imports

```typescript
// UI components together
import { Button, Card, Input, Modal } from "@/components/ui";
import { Header, Navigation } from "@/components/layout";

// Feature imports together
import { ProductCard, ProductGrid } from "@/features/product/components";
import { useProductFilters, useProductSearch } from "@/features/product/hooks";

// Types together
import type { Product, User, CartItem } from "@/types";
```

### ❌ DON'T: Mix import categories

```typescript
// ❌ DON'T: Mix different categories
import { Button } from "@/components/ui";
import { useAuth } from "@/features/auth/hooks";
import { Card } from "@/components/ui";
import type { User } from "@/types";
import { Header } from "@/components/layout";
```

## Dynamic Imports

Use dynamic imports for code splitting:

```typescript
// ✅ DO: Dynamic imports for large components
const HeavyChart = dynamic(() => import("@/components/heavy-chart"), {
  loading: () => <div>Loading chart...</div>,
  ssr: false,
});

// ✅ DO: Dynamic imports for feature modules
const ProductDashboard = dynamic(
  () => import("@/features/product/components/product-dashboard"),
  { loading: () => <div>Loading...</div> }
);
```

## Type Imports

Use explicit type imports for better tree-shaking:

```typescript
// ✅ DO: Explicit type imports
import type { ComponentProps, ReactNode } from "react";
import type { NextPage } from "next";
import type { Product, User } from "@/types";

// ✅ DO: Mixed imports when needed
import { useState, type Dispatch, type SetStateAction } from "react";
import { Button, type ButtonProps } from "@/components/ui";
```

## Re-export Patterns

### Feature Re-exports

```typescript
// src/features/product/components/index.ts
export { ProductCard } from "./product-card";
export { ProductGrid } from "./product-grid";
export { ProductDetails } from "./product-details";

// Re-export types
export type { ProductCardProps } from "./product-card";
export type { ProductGridProps } from "./product-grid";
```

### Global Re-exports

```typescript
// src/components/index.ts - Main component export
export * from "./ui";
export * from "./layout";

// src/types/index.ts - Main types export
export * from "./user";
export * from "./product";
export * from "./cart";
```

## Import Restrictions

### ❌ DON'T: Cross-feature imports

```typescript
// ❌ DON'T: Import one feature from another
import { CartService } from "@/features/cart/services";
```

### ✅ DO: Use global services or state

```typescript
// ✅ DO: Import from global services
import { cartService } from "@/services/cart-service";
import { useCartStore } from "@/store/cart-store";
```

### ❌ DON'T: Deep imports into node_modules

```typescript
// ❌ DON'T: Deep imports
import { formatDistance } from "date-fns/formatDistance";

// ✅ DO: Top-level imports
import { formatDistance } from "date-fns";
```
